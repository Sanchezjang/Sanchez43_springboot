<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper	namespace="ksmart.mybatis.mapper.MemberMapper">
  							
  	<resultMap type="Member" id="memberResultMap">
  		<id column="m_id" property="memberId"/>
  		<result column="m_pw" property="memberPw"/>
  		<result column="m_name" property="memberName"/>
  		<result column="m_level" property="memberLevel"/>
  		<result column="m_email" property="memberEmail"/>
  		<result column="m_addr" property="memberAddr"/>
  		<result column="m_reg_date" property="memberRegDate"/>
  		<association property="levelInfo" javaType="MemberLevel">
  			<id column="level_num" property="levelNum"/>
  			<result column="level_name" property="levelName"/>
  			<result column="level_reg_date" property="levelRegDate"/>
  		</association>
  		<collection property="goodsList" ofType="goods">
			<id column="g_code" property="goodsCode"/>  			
			<result column="g_name" property="goodsName"/>  			
			<result column="g_price" property="goodsPrice"/>  			
			<result column="g_seller_id" property="goodsSellerId"/>  			
			<result column="g_reg_date" property="goodsRegDate"/>  			
  		</collection>
  	</resultMap>
  	
  	<select id="getLoginHistory" parameterType="map" resultType="map">
  			SELECT
				l.login_num     AS loginNum
				,l.login_id		 AS loginId
				,l.login_date	 AS loginDate
				,l.logout_date  AS logoutDate
			FROM
				 tb_login AS l
			LIMIT #{startRow}, #{rowPerPage};
	  	</select>
  	
  	<select id="getLoginHistoryCount" resultType="int">
	  		SELECT
				COUNT(l.login_num)
			FROM
				 tb_login AS l;
  	</select>
  	
  	<select id="getgoodsList" resultType="goods" fetchSize="100">
  		select 
			g_code 
			,g_name 
			,g_price 
			,g_seller_id 
			,g_reg_date 
		from 
			tb_goods ;
  	</select>
  	
  	<select id="getSellerInfoList" fetchSize="100" resultMap="memberResultMap">
		/*판매자 정보획득?*/
		SELECT
			m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
			,g.g_code
			,g.g_name
			,g.g_price
			,g.g_reg_date
		FROM
			tb_member AS m
			INNER JOIN
			tb_goods AS g
			on
			m.m_id = g.g_seller_id
		ORDER BY m.m_id, g.g_code;
  	</select>
  	
  	<select id="getMemberInfoList" fetchSize="100" resultMap="memberResultMap">
		/*회원목록조회복잡한결과매핑*/	
			SELECT
				m.m_id
				,m.m_pw
				,m.m_name
				,m.m_level
				,m.m_email
				,m.m_addr
				,m.m_reg_date
				,l.level_num
				,l.level_name
				,l.level_reg_date
			FROM
				tb_member AS m
				INNER join
				tb_member_level AS l
				on
				m.m_level = l.level_num
			ORDER BY m.m_id;
  	</select>
  	
  	<select id="getSearchMemberList" fetchSize="1000" parameterType="String"  resultMap="memberResultMap">
  			select
		 m.m_id 
		,m.m_pw 
		,m.m_name 
		,m.m_level
		,m.m_email 
		,m.m_addr
		,m.m_reg_date 
	from 
		tb_member as m
	<trim	prefix="where" prefixOverrides="AND |OR">
		<if test="searchValue != null and searchValue !=''">
			${searchKey} LIKE CONCAT('%',#{searchValue},'%');
		</if>
	</trim>
  	</select>
  	
  	<delete id="removeOrderByGCode" parameterType="String">
		/*tb_order (상품코드에 연관된 튜플삭제) join*/
		delete 
			o
		from 
			tb_order as o 
		inner join
			tb_goods as g
		on
			  o.o_g_code = g.g_code 
		where 
			 g.g_seller_id = #{memberId};
  	</delete>
  	<delete id="removeGoodById" parameterType="String">
			/*tb_goods (판매자가 등록한 상품 목록 삭제)*/
		delete
		from 
			tb_goods 
		where
			g_seller_id = #{memberId};
  	</delete>
  	<delete id="removeOrderById" parameterType="String">
		/*tb_order (구매자구매한주문내역삭제)*/
		delete
		from 
			tb_order 
		where
		o_id = #{memberId};
  	</delete>
  	<delete id="removeLoginHistoryById" parameterType="String">
		/*tb_login (회원이 로그한이력삭제*/
		delete
		from 
			tb_login 
		where
			login_id = #{memberId};
  	</delete>
  	<delete id="removeMemberById" parameterType="String">
	    /*tb_member (회원탈퇴)*/
		delete
		from 
			tb_member 
		where
			m_id = #{memberId};
  	</delete>
  	
  	<update id="modifyMember" parameterType="Member">
  			update 	tb_member 
  		<trim prefix="SET" prefixOverrides=",">
  			<if test="memberPw !=null and memberPw != ''">
  				m_pw =#{memberPw}
  			</if>
  			<if test="memberName !=null and memberName != ''">
  				,m_name = #{memberName}
  			</if>
  			<if test="memberLevel !=null and memberLevel != ''">
  				,m_level = #{memberLevel}
  			</if>
  			<if test="memberEmail !=null and memberEmail != ''">
  				,m_email = #{memberEmail}
  			</if>
  			<if test="memberAddr !=null and memberAddr != ''">
  				,m_addr = #{memberAddr}
  			</if>
  		</trim>	
			where 
				m_id = #{memberId};
  	</update>
  	
  	<select id="getMemberInfoById" parameterType="String" resultMap="memberResultMap">
  		select
		 m.m_id 
		,m.m_pw 
		,m.m_name 
		,m.m_level
		,m.m_email 
		,m.m_addr
		,m.m_reg_date 
	from 
		tb_member as m
	where
		m.m_id =#{memberId};
  	</select>	
  		
  		
  	<insert id="addMember" parameterType="Member">
  		/*회원가입*/
  		insert into tb_member 
	(	m_id 
		,m_pw 
		,m_name 
		,m_level 
		,m_email 
		,m_addr 
		,m_reg_date 
	)values(
		 #{memberId}
		,#{memberPw}
		,#{memberName}
		,#{memberLevel}
		,#{memberEmail}
		,#{memberAddr}
		,CURDATE()
	);
  		
  	</insert>
  	
  	<select id="getMemberList" resultType="Member">
  		/*회원목록조회*/
  		
  	select 
	m.m_id   as memberId
		,m.m_pw  as memberPw
		,m.m_name as memberName
		,m.m_level as memberLevel
		,m.m_email as memberEmail
		,m.m_addr  as memberAddr
		,m.m_reg_date as memberRegDate
	from 
		tb_member as m;
	
  	</select>
  	
  		<select id="getMemberLevelList" resultType="MemberLevel">
  		/*회원목록조회*/
  		select 
			l.level_num as levelNum 
			,l.level_name as levelName
			,l.level_reg_date as levelRegDate
		from 
			tb_member_level as l;
  	</select>
  	
  </mapper>